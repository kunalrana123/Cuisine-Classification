# -*- coding: utf-8 -*-
"""Cuisine Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dmNYyxqxLKPzukJPTa7FB7SBuzMsI3R4
"""

import numpy as np
import pandas as pd

import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('/content/Dataset .csv')

df.head(1)

df.drop('Restaurant ID', axis=1, inplace=True)
df.drop('Country Code', axis=1, inplace=True)
df.drop('City', axis=1, inplace=True)
df.drop('Address', axis=1, inplace=True)
df.drop('Locality', axis=1, inplace=True)
df.drop('Locality Verbose', axis=1, inplace=True)
df.drop('Longitude', axis=1, inplace=True)
df.drop('Latitude', axis=1, inplace=True)
df.drop('Currency', axis=1, inplace=True)
df.drop('Has Table booking', axis=1, inplace=True)
df.drop('Has Online delivery', axis=1, inplace=True)
df.drop('Is delivering now', axis=1, inplace=True)
df.drop('Switch to order menu', axis=1, inplace=True)
df.drop('Price range', axis=1, inplace=True)
df.drop('Aggregate rating', axis=1, inplace=True)
df.drop('Rating color', axis=1, inplace=True)
df.drop('Rating text', axis=1, inplace=True)
df.drop('Votes', axis=1, inplace=True)

df

df.isnull().sum()

df.dropna(inplace=True)

df.shape

missing_values = df.isna().sum()
missing_values_column = df['Restaurant Name'].isna().sum()
missing_values_column = df['Cuisines'].isna().sum()
missing_values_column = df['Average Cost for two'].isna().sum()

df_cleaned = df.dropna()
df_cleaned = df.dropna(subset=['Restaurant Name'])
df_cleaned = df.dropna(subset=['Cuisines'])
df_cleaned = df.dropna(subset=['Average Cost for two'])

df.describe(include="all")

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
df['Restaurant Name'] = label_encoder.fit_transform(df['Restaurant Name'])
df['Cuisines'] = label_encoder.fit_transform(df['Cuisines'])

df

X = df[['Restaurant Name', 'Average Cost for two']]
Y = df['Cuisines']

from sklearn.preprocessing import StandardScaler

scaler= StandardScaler()

scaler.fit(X)
X= scaler.transform(X)

from sklearn.model_selection import train_test_split


X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2,
                                                    random_state=10)

# predicting using Decision Tree Classifier.
from sklearn.tree import DecisionTreeClassifier

model_DT = DecisionTreeClassifier(random_state=10,
                                   criterion="gini")

# fit the model on data and predict the values
model_DT.fit(X_train,Y_train)      # fit is the function that is used for training the data
Y_pred = model_DT.predict(X_test) # Validation Data
#print(Y_pred)
print(list(zip(Y_test,Y_pred)))

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

cfm=confusion_matrix(Y_test,Y_pred)
print(cfm)

print("Classification report: ")

print(classification_report(Y_test,Y_pred))

acc=accuracy_score(Y_test, Y_pred)
print("Accuracy of the model: ",acc)

from sklearn.linear_model import LogisticRegression
#create a model object
classifier = LogisticRegression(multi_class="multinomial")
#train the model object
classifier.fit(X_train,Y_train)      # fit is the function that is used for training the data

Y_pred = classifier.predict(X_test)
print(Y_pred)

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

cfm=confusion_matrix(Y_test,Y_pred)
print(cfm)

print("Classification report: ")

print(classification_report(Y_test,Y_pred))

acc=accuracy_score(Y_test, Y_pred)
print("Accuracy of the model: ",acc)

